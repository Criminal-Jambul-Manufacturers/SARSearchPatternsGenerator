//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SARSearchPatternsGenerator.src {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class DefaultComments {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal DefaultComments() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SARSearchPatternsGenerator.src.DefaultComments", typeof(DefaultComments).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This procedure is referred to as an expanding square search as it begins at the
        ///reported position or most probable location and expands outwards in concentric
        ///squares. It is a very precise pattern and requires accurate navigation.
        ///To minimise navigational errors, the first leg is usually oriented directly into the wind.
        /// 
        ///The square search pattern is used when the target is known to be in a relatively
        ///small area, no more than 15-20 NM from the start point.
        /// 
        ///The first two legs are travelled to a dis [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ExpandingSquareComment {
            get {
                return ResourceManager.GetString("ExpandingSquareComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Parallel track patterns are normally used when:
        ///        a) The search area is large and the terrain is relatively level, e.g. desert and maritime areas;
        ///        b) Uniform coverage is required; and
        ///        c) The location of the target is not known with any precision.
        /// 
        ///Search legs are aligned parallel to the long axis of the individual search area.
        ///The pattern is best used in rectangular or square areas. It is a very suitable
        ///pattern for a search conducted over water. The search aircraft proceeds fr [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ParallelTrackComment {
            get {
                return ResourceManager.GetString("ParallelTrackComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The track line search is normally employed when an aircraft or vessel has disappeared
        ///without a trace. It is based on the assumption that the target has crashed,
        ///made a forced landing or ditched on or near the intended route (track) and will be easily
        ///seen, or that there are survivors capable of signalling their position by a flashing
        ///lamp or other means.
        /// 
        ///The track line search consists of a rapid and reasonably thorough search on
        ///either side of the intended route of the target, normally at a height [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PointToPointComment {
            get {
                return ResourceManager.GetString("PointToPointComment", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This procedure is used when the position is know or the searh area is not extensive.
        ///The sector search pattern is simple to execute wit haccurate navigational equipment.
        ///A high Probability of Detection (POD) is obtained near the target center.
        ///A floating datum marker will automatically follow the water current when searching over water..
        /// </summary>
        internal static string SectorSearchComment {
            get {
                return ResourceManager.GetString("SectorSearchComment", resourceCulture);
            }
        }
    }
}
